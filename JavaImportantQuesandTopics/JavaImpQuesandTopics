NOTES:
SOLID PRINCIPLES
S- Single Responsibility Principle
O- Open for extension closed for modifications
L- Liskov Subsitution Principle
I- Interface Segregation Principle
D- Dependency Inversion Principle
explicit or downcasting- It means storing larger variable into the smaller one or storing referece of parent class into child class
implicit or upcasting- it means storing smaller variable into the largerOne or storing the reference of the child class to the parent class

Boxing and Unboxing in the Wrapper class
Boxing- storing the primitive datatype into their corresponding wrapper class object
Unboxing-storing the  wrapper class object into their corresponding primitive datatype

Abstract Method- An abstract method is declared without a body in an abstract class. It must be implemented by subclasses.
Method- A method in Java is a block of code that performs a specific task.

Why Constructor do no have Return Type
Why Constructor name is same as Class Name
reason- because it makes them different from the other methods
Why Constructor can not be declared as FINAL
Why Constructor can not be declared as ABSTRACT
Why Constructor can not be declared as STATIC
reason- constructor are used to initialize or create the object of the class So, it pointless to used final,static and abstract keyword
Why Interface do not have constructor
reason-

What kind of data is Stored in Stack and Heap with Example
reason- usually primitive data is stored in stack and heap is used to stored the object ,array,and classes etc
Garbage Collector- It is something which is removed the unpointed objects to free up the memory

Types of References
Strong Reference- It says that objects inside the memory cannot is removed by GC until it is disconnect
Example- Person obj=new Person();
Weak Reference- It says that objects inside the memory should be removed by GC when it periodically runs
Example- WeakReference<Person> weakObjRef=new WeakReference<Person>(obj);
Soft Reference- It says that objects inside the memory should be removed by GC until it is necessary
Example- SoftReference<Person> softObjRef=new SoftReference<Person>(obj);

Heap Memory Structure- Heap memory is divided into the 3 parts Young Generation,Old Generation and Metaspace
Young Generation- it is also divided into 3 parts Eden Supervisor(S0,S1) and It contains small objects and here it is running minor GC more periodically here
Eden
Survivor (S0 and S1)

Old Generation- It contains Large and Old objects and here it is running Major GC less periodically here
Metaspace- It is used to stored the class etc

How Garbage Collector work & clean up the Heap memory with Example
reason- it uses Mark and Sweep algo and Compact mark and Sweep algo
Types of Garbage Collector
Single GC- GC is only running by 1 thread.
Parallel GC- GC is only running by multiple parallel thread depending on the core
CMS (Concurrent Mark and Sweep)-
G1 GC-

Concrete Class- It is simple classes that can be initialized and having data members and methods
Abstract Class- It is those classes that cannot be initialized and May have abstracts methods and simple methods that can be initialize
Nested Class-  The class inside of the another class is called nested class
Static Nested Class- Static Nested class are those classes in which parent class is simple class and Nested class is static
Non Static Nested or Inner Class- Inner classes are those classes which is simple nested classes
Anonymous Inner Class-Anonymous class are those classes which do not have any name
It is used to create a one-time use class, typically as an implementation of an interface or an extension of a class.

Shallow Copy- Creates a new object but copies references, so changes in one affect the other.
Deep Copy- Creates a completely independent object with its own copy of the data.

A memory leak occurs when a program allocates memory dynamically (e.g., for objects or variables) but fails to release it when it's no longer needed.

Functional Interface-  It is defined as the type of interface which can contains only one method and we can also represent it by using the @FunctionalInterface annotation.
Functional Interface is divided into the 4 types.
1 Consumer  - It is a type of interface which contains one method that can take arguement and doesn't return anything.
2 Supplier  - It is a type of interface which contains one method that cannot have arguement and return somthing.
3 Function  - It is a type of interface which contains one method that can take arguement and return something.
4 Predicate - It is a type of interface which contains one method that can take arguement and return boolean.

Note- suppose a interface is having the one abstract method and it is extended by the functional interface then it will give error and vice-versa is possible.